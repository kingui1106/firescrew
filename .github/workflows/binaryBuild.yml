on:
  workflow_dispatch:
name: Build and Release
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_suffix: "linux.amd64"
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_suffix: "linux.arm64"
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_suffix: "windows.amd64.exe"
          - os: windows-latest
            goos: windows
            goarch: arm64
            binary_suffix: "windows.arm64.exe"
    
    runs-on: ${{ matrix.os }}
    env:
      TAG: latest
      RELEASE_NAME: Latest release
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BINARY_PREFIX: ${{ github.event.repository.name }}
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21'
      
      - name: Set release date
        shell: bash
        run: echo "RELEASE_DATE=$(date +'%Y-%m-%d_%H:%M:%S')" >> $GITHUB_ENV
      
      - name: Set RELEASE_BODY
        shell: bash
        run: echo "RELEASE_BODY=Latest release ${{ env.RELEASE_DATE }}" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: go mod download
      
      - name: Download lib.tgz for object detection (Linux only)
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: curl -L https://7ff.org/lib.tgz -o pkg/objectPredict/lib.tgz
      
      - name: Build main binary
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -ldflags "-X 'main.Version=${{ env.RELEASE_DATE }}'" -o "build/${{ env.BINARY_PREFIX }}.${{ matrix.binary_suffix }}"
      
      - name: Build RTSP Server binary (Linux only)
        if: matrix.goos == 'linux'
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd demoStream/rtspServer
          go build -ldflags "-X 'main.Version=${{ env.RELEASE_DATE }}'" -o "../../build/rtspServer.${{ matrix.goos }}.${{ matrix.goarch }}"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      TAG: latest
      RELEASE_NAME: Latest release
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Set release date
        run: echo "RELEASE_DATE=$(date +'%Y-%m-%d_%H:%M:%S')" >> $GITHUB_ENV
      
      - name: Set RELEASE_BODY
        run: echo "RELEASE_BODY=Latest release ${{ env.RELEASE_DATE }}" >> $GITHUB_ENV
      
      - name: Download releaseMaker
        run: wget https://github.com/8ff/releaseMaker/releases/download/latest/releaseMaker.linux.amd64 -O /tmp/releaseMaker && chmod +x /tmp/releaseMaker
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Organize binaries
        run: |
          mkdir -p /tmp/build
          find artifacts -name "*" -type f -exec cp {} /tmp/build/ \;
          ls -la /tmp/build/
      
      - name: Replace Existing Release
        run: /tmp/releaseMaker replace ${{ github.repository }} ${{ env.TAG }} "${{ env.RELEASE_NAME }}" "${{ env.RELEASE_BODY }}"
      
      - name: Upload the artifacts
        run: |
          cd /tmp/build
          for file in *; do
            echo "Uploading $file"
            /tmp/releaseMaker upload ${{ github.repository }} ${{ env.TAG }} $file $file
          done